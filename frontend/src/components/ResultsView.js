import React, { useState } from 'react';
import { FileText, Download, Eye, RefreshCw } from 'lucide-react';
import axios from 'axios';

const ResultsView = ({ results, onGenerateSRS }) => {
  const [isGeneratingSRS, setIsGeneratingSRS] = useState(false);
  const [srsGenerated, setSrsGenerated] = useState(false);
  const [srsData, setSrsData] = useState(null);

  const generateSRS = async () => {
    if (!results) return;
    
    setIsGeneratingSRS(true);
    try {
      const response = await axios.post('http://localhost:8000/api/generate-srs', {
        results: results
      });
      
      setSrsData(response.data);
      onGenerateSRS(response.data);
      setSrsGenerated(true);
    } catch (error) {
      console.error('SRS generation failed:', error);
    } finally {
      setIsGeneratingSRS(false);
    }
  };

  const downloadSRSDocument = async () => {
    if (!srsData) return;
    
    try {
      // Generate HTML content
      const htmlContent = generateHTMLContent(srsData);
      
      // Create and download the file
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `srs_${srsData.document_id}.html`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading SRS document:', error);
    }
  };

  const generateHTMLContent = (data) => {
    return `<!DOCTYPE html>
<html>
<head>
    <title>${data.title}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        h3 { color: #7f8c8d; margin-top: 20px; }
        .metadata { background-color: #ecf0f1; padding: 15px; margin-bottom: 20px; border-radius: 5px; }
        ul { margin: 10px 0; }
        li { margin: 5px 0; }
        .section { margin: 20px 0; }
    </style>
</head>
<body>
    <h1>${data.title}</h1>
    
    <div class="metadata">
        <p><strong>Document ID:</strong> ${data.document_id}</p>
        <p><strong>Version:</strong> ${data.version}</p>
        <p><strong>Date:</strong> ${data.date}</p>
        <p><strong>Author:</strong> ${data.author}</p>
    </div>
    
    <div class="section">
        <h2>1. Introduction</h2>
        <h3>1.1 Purpose</h3>
        <p>${data.sections.introduction.purpose}</p>
        
        <h3>1.2 Scope</h3>
        <p>${data.sections.introduction.scope}</p>
        
        <h3>1.3 Definitions</h3>
        <ul>
            ${data.sections.introduction.definitions.map(def => `<li>${def}</li>`).join('')}
        </ul>
        
        <h3>1.4 Overview</h3>
        <p>${data.sections.introduction.overview}</p>
    </div>
    
    <div class="section">
        <h2>2. Overall Description</h2>
        <h3>2.1 Product Functions</h3>
        <ul>
            ${data.sections.overall_description.product_functions.map(func => `<li>${func}</li>`).join('')}
        </ul>
        
        <h3>2.2 User Characteristics</h3>
        <ul>
            ${data.sections.overall_description.user_characteristics.map(user => `<li>${user}</li>`).join('')}
        </ul>
        
        <h3>2.3 Constraints</h3>
        <ul>
            ${data.sections.overall_description.constraints.map(constraint => `<li>${constraint}</li>`).join('')}
        </ul>
        
        <h3>2.4 Assumptions</h3>
        <ul>
            ${data.sections.overall_description.assumptions.map(assumption => `<li>${assumption}</li>`).join('')}
        </ul>
        
        <h3>2.5 Dependencies</h3>
        <ul>
            ${data.sections.overall_description.dependencies.map(dep => `<li>${dep}</li>`).join('')}
        </ul>
    </div>
    
    <div class="section">
        <h2>3. Note</h2>
        <p><em>This is an initial SRS document generated by Module 1. It contains only the Introduction and Overall Description sections. 
        Specific Requirements and other detailed sections will be generated in subsequent modules of the requirements engineering system.</em></p>
    </div>
</body>
</html>`;
  };

  const downloadResults = () => {
    if (!results) return;
    
    const dataStr = JSON.stringify(results, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'requirements_results.json';
    link.click();
    URL.revokeObjectURL(url);
  };

  if (!results) {
    return (
      <div className="max-w-4xl mx-auto text-center py-16">
        <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
        <h2 className="text-2xl font-bold text-gray-900 mb-4">No Results Available</h2>
        <p className="text-gray-600 mb-8">
          Process some requirements first to see results here.
        </p>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto animate-fade-in">
      <div className="bg-white rounded-xl card-shadow p-8">
        <div className="flex items-center justify-between mb-8">
          <h2 className="text-3xl font-bold text-gray-900">Processing Results</h2>
          <div className="flex space-x-4">
            <button
              onClick={downloadResults}
              className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors duration-200"
            >
              <Download className="h-4 w-4" />
              <span>Download JSON</span>
            </button>
            <button
              onClick={generateSRS}
              disabled={isGeneratingSRS || srsGenerated}
              className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors duration-200"
            >
              {isGeneratingSRS ? (
                <>
                  <RefreshCw className="h-4 w-4 animate-spin" />
                  <span>Generating...</span>
                </>
              ) : (
                <>
                  <FileText className="h-4 w-4" />
                  <span>{srsGenerated ? 'SRS Generated' : 'Generate SRS'}</span>
                </>
              )}
            </button>
            {srsGenerated && (
              <button
                onClick={() => downloadSRSDocument()}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors duration-200"
              >
                <Download className="h-4 w-4" />
                <span>Download SRS Document</span>
              </button>
            )}
          </div>
        </div>

        {/* Results Summary */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <div className="bg-blue-50 p-6 rounded-lg">
            <h3 className="text-lg font-semibold text-blue-900 mb-2">Status</h3>
            <p className="text-2xl font-bold text-blue-600">
              {results.status || 'Completed'}
            </p>
          </div>
          <div className="bg-green-50 p-6 rounded-lg">
            <h3 className="text-lg font-semibold text-green-900 mb-2">Requirements</h3>
            <p className="text-2xl font-bold text-green-600">
              {Array.isArray(results) ? results.length : 1}
            </p>
          </div>
          <div className="bg-purple-50 p-6 rounded-lg">
            <h3 className="text-lg font-semibold text-purple-900 mb-2">Timestamp</h3>
            <p className="text-sm font-bold text-purple-600">
              {results.timestamp ? new Date(results.timestamp).toLocaleString() : 'N/A'}
            </p>
          </div>
        </div>

        {/* Detailed Results */}
        <div className="space-y-6">
          {Array.isArray(results) ? (
            results.map((result, index) => (
              <RequirementCard key={index} result={result} index={index} />
            ))
          ) : (
            <RequirementCard result={results} index={0} />
          )}
        </div>
      </div>
    </div>
  );
};

const RequirementCard = ({ result, index }) => {
  const [expandedSection, setExpandedSection] = useState(null);

  const toggleSection = (section) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  return (
    <div className="border border-gray-200 rounded-lg p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-semibold text-gray-900">
          Requirement #{index + 1}
        </h3>
        <span className={`px-3 py-1 rounded-full text-sm font-medium ${
          result.status === 'completed' 
            ? 'bg-green-100 text-green-800' 
            : 'bg-red-100 text-red-800'
        }`}>
          {result.status}
        </span>
      </div>

      {/* Original Text */}
      <div className="mb-6">
        <h4 className="text-lg font-medium text-gray-900 mb-2">Original Text</h4>
        <div className="bg-gray-50 p-4 rounded-lg">
          <p className="text-gray-700">{result.original_text}</p>
        </div>
      </div>

      {/* Expandable Sections */}
      <div className="grid md:grid-cols-2 gap-4">
        {/* Preprocessed Data */}
        {result.preprocessed && (
          <div className="bg-blue-50 p-4 rounded-lg">
            <button
              onClick={() => toggleSection('preprocessed')}
              className="w-full text-left font-medium text-blue-900 mb-2 flex items-center justify-between"
            >
              <span>Preprocessed Data</span>
              <Eye className={`h-4 w-4 transition-transform ${expandedSection === 'preprocessed' ? 'rotate-180' : ''}`} />
            </button>
            {expandedSection === 'preprocessed' && (
              <div className="mt-2 text-sm text-blue-800">
                <p><strong>Sentences:</strong> {result.preprocessed.sentences?.length || 0}</p>
                <p><strong>Tokens:</strong> {result.preprocessed.tokens?.length || 0}</p>
                <p><strong>Entities:</strong> {result.preprocessed.entities?.length || 0}</p>
              </div>
            )}
          </div>
        )}

        {/* Ambiguities */}
        {result.ambiguities && result.ambiguities.length > 0 && (
          <div className="bg-yellow-50 p-4 rounded-lg">
            <button
              onClick={() => toggleSection('ambiguities')}
              className="w-full text-left font-medium text-yellow-900 mb-2 flex items-center justify-between"
            >
              <span>Ambiguities ({result.ambiguities.length})</span>
              <Eye className={`h-4 w-4 transition-transform ${expandedSection === 'ambiguities' ? 'rotate-180' : ''}`} />
            </button>
            {expandedSection === 'ambiguities' && (
              <div className="mt-2 space-y-2">
                {result.ambiguities.map((ambiguity, idx) => (
                  <div key={idx} className="text-sm text-yellow-800">
                    <p><strong>{ambiguity.word}</strong> - {ambiguity.category}</p>
                    <p className="text-xs">{ambiguity.suggestion}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Extracted Fields */}
        {result.extracted_fields && (
          <div className="bg-green-50 p-4 rounded-lg">
            <button
              onClick={() => toggleSection('extracted')}
              className="w-full text-left font-medium text-green-900 mb-2 flex items-center justify-between"
            >
              <span>Extracted Fields</span>
              <Eye className={`h-4 w-4 transition-transform ${expandedSection === 'extracted' ? 'rotate-180' : ''}`} />
            </button>
            {expandedSection === 'extracted' && (
              <div className="mt-2 space-y-2">
                {Object.entries(result.extracted_fields).map(([key, value]) => (
                  <div key={key} className="text-sm text-green-800">
                    <p><strong>{key}:</strong> {value}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* SRS Sections */}
        {result.srs_sections && (
          <div className="bg-purple-50 p-4 rounded-lg">
            <button
              onClick={() => toggleSection('srs')}
              className="w-full text-left font-medium text-purple-900 mb-2 flex items-center justify-between"
            >
              <span>SRS Sections</span>
              <Eye className={`h-4 w-4 transition-transform ${expandedSection === 'srs' ? 'rotate-180' : ''}`} />
            </button>
            {expandedSection === 'srs' && (
              <div className="mt-2 space-y-2">
                {Object.entries(result.srs_sections).map(([key, value]) => (
                  <div key={key} className="text-sm text-purple-800">
                    <p><strong>{key}:</strong> {typeof value === 'object' ? JSON.stringify(value) : value}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ResultsView;

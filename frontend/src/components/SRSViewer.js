import React, { useState } from 'react';
import { Download, FileText, Eye, ChevronDown, ChevronRight } from 'lucide-react';

const SRSViewer = ({ srsData }) => {
  const [expandedSections, setExpandedSections] = useState({});
  const [viewMode, setViewMode] = useState('html');

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const downloadSRS = (format) => {
    if (!srsData) return;

    let content, filename, mimeType;

    if (format === 'json') {
      content = JSON.stringify(srsData, null, 2);
      filename = `srs_${srsData.document_id}.json`;
      mimeType = 'application/json';
    } else {
      // Generate HTML content
      content = generateHTMLContent(srsData);
      filename = `srs_${srsData.document_id}.html`;
      mimeType = 'text/html';
    }

    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.click();
    URL.revokeObjectURL(url);
  };

  const generateHTMLContent = (data) => {
    return `
<!DOCTYPE html>
<html>
<head>
    <title>${data.title}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        h3 { color: #7f8c8d; margin-top: 20px; }
        .metadata { background-color: #ecf0f1; padding: 15px; margin-bottom: 20px; border-radius: 5px; }
        ul { margin: 10px 0; }
        li { margin: 5px 0; }
        .section { margin: 20px 0; }
    </style>
</head>
<body>
    <h1>${data.title}</h1>
    
    <div class="metadata">
        <p><strong>Document ID:</strong> ${data.document_id}</p>
        <p><strong>Version:</strong> ${data.version}</p>
        <p><strong>Date:</strong> ${data.date}</p>
        <p><strong>Author:</strong> ${data.author}</p>
    </div>
    
    <div class="section">
        <h2>1. Introduction</h2>
        <h3>1.1 Purpose</h3>
        <p>${data.sections.introduction.purpose}</p>
        
        <h3>1.2 Scope</h3>
        <p>${data.sections.introduction.scope}</p>
        
        <h3>1.3 Definitions</h3>
        <ul>
            ${data.sections.introduction.definitions.map(def => `<li>${def}</li>`).join('')}
        </ul>
        
        <h3>1.4 Overview</h3>
        <p>${data.sections.introduction.overview}</p>
    </div>
    
    <div class="section">
        <h2>2. Overall Description</h2>
        <h3>2.1 Product Functions</h3>
        <ul>
            ${data.sections.overall_description.product_functions.map(func => `<li>${func}</li>`).join('')}
        </ul>
        
        <h3>2.2 User Characteristics</h3>
        <ul>
            ${data.sections.overall_description.user_characteristics.map(user => `<li>${user}</li>`).join('')}
        </ul>
        
        <h3>2.3 Constraints</h3>
        <ul>
            ${data.sections.overall_description.constraints.map(constraint => `<li>${constraint}</li>`).join('')}
        </ul>
        
        <h3>2.4 Assumptions</h3>
        <ul>
            ${data.sections.overall_description.assumptions.map(assumption => `<li>${assumption}</li>`).join('')}
        </ul>
        
        <h3>2.5 Dependencies</h3>
        <ul>
            ${data.sections.overall_description.dependencies.map(dep => `<li>${dep}</li>`).join('')}
        </ul>
    </div>
    
    <div class="section">
        <h2>3. Note</h2>
        <p><em>This is an initial SRS document generated by Module 1. It contains only the Introduction and Overall Description sections. 
        Specific Requirements and other detailed sections will be generated in subsequent modules of the requirements engineering system.</em></p>
    </div>
</body>
</html>`;
  };

  if (!srsData) {
    return (
      <div className="max-w-4xl mx-auto text-center py-16">
        <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
        <h2 className="text-2xl font-bold text-gray-900 mb-4">No SRS Document Available</h2>
        <p className="text-gray-600 mb-8">
          Generate an SRS document from processed requirements to view it here.
        </p>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto animate-fade-in">
      <div className="bg-white rounded-xl card-shadow p-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold text-gray-900">{srsData.title}</h2>
            <p className="text-gray-600">Document ID: {srsData.document_id}</p>
          </div>
          <div className="flex space-x-4">
            <button
              onClick={() => downloadSRS('html')}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors duration-200"
            >
              <Download className="h-4 w-4" />
              <span>Download HTML</span>
            </button>
            <button
              onClick={() => downloadSRS('json')}
              className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors duration-200"
            >
              <Download className="h-4 w-4" />
              <span>Download JSON</span>
            </button>
          </div>
        </div>

        {/* Document Metadata */}
        <div className="bg-gray-50 p-6 rounded-lg mb-8">
          <div className="grid md:grid-cols-4 gap-4">
            <div>
              <h3 className="text-sm font-medium text-gray-700">Version</h3>
              <p className="text-lg font-semibold text-gray-900">{srsData.version}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-700">Date</h3>
              <p className="text-lg font-semibold text-gray-900">{srsData.date}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-700">Author</h3>
              <p className="text-lg font-semibold text-gray-900">{srsData.author}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-700">Status</h3>
              <p className="text-lg font-semibold text-green-600">Generated</p>
            </div>
          </div>
        </div>

        {/* SRS Sections */}
        <div className="space-y-6">
          {/* Introduction Section */}
          <div className="border border-gray-200 rounded-lg">
            <button
              onClick={() => toggleSection('introduction')}
              className="w-full p-6 text-left flex items-center justify-between hover:bg-gray-50 transition-colors duration-200"
            >
              <h3 className="text-xl font-semibold text-gray-900">1. Introduction</h3>
              {expandedSections.introduction ? (
                <ChevronDown className="h-5 w-5 text-gray-500" />
              ) : (
                <ChevronRight className="h-5 w-5 text-gray-500" />
              )}
            </button>
            {expandedSections.introduction && (
              <div className="px-6 pb-6 space-y-4">
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">1.1 Purpose</h4>
                  <p className="text-gray-700">{srsData.sections.introduction.purpose}</p>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">1.2 Scope</h4>
                  <p className="text-gray-700">{srsData.sections.introduction.scope}</p>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">1.3 Definitions</h4>
                  <ul className="list-disc list-inside text-gray-700 space-y-1">
                    {srsData.sections.introduction.definitions.map((def, index) => (
                      <li key={index}>{def}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">1.4 Overview</h4>
                  <p className="text-gray-700">{srsData.sections.introduction.overview}</p>
                </div>
              </div>
            )}
          </div>

          {/* Overall Description Section */}
          <div className="border border-gray-200 rounded-lg">
            <button
              onClick={() => toggleSection('overall_description')}
              className="w-full p-6 text-left flex items-center justify-between hover:bg-gray-50 transition-colors duration-200"
            >
              <h3 className="text-xl font-semibold text-gray-900">2. Overall Description</h3>
              {expandedSections.overall_description ? (
                <ChevronDown className="h-5 w-5 text-gray-500" />
              ) : (
                <ChevronRight className="h-5 w-5 text-gray-500" />
              )}
            </button>
            {expandedSections.overall_description && (
              <div className="px-6 pb-6 space-y-4">
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">2.1 Product Functions</h4>
                  <ul className="list-disc list-inside text-gray-700 space-y-1">
                    {srsData.sections.overall_description.product_functions.map((func, index) => (
                      <li key={index}>{func}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">2.2 User Characteristics</h4>
                  <ul className="list-disc list-inside text-gray-700 space-y-1">
                    {srsData.sections.overall_description.user_characteristics.map((user, index) => (
                      <li key={index}>{user}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">2.3 Constraints</h4>
                  <ul className="list-disc list-inside text-gray-700 space-y-1">
                    {srsData.sections.overall_description.constraints.map((constraint, index) => (
                      <li key={index}>{constraint}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">2.4 Assumptions</h4>
                  <ul className="list-disc list-inside text-gray-700 space-y-1">
                    {srsData.sections.overall_description.assumptions.map((assumption, index) => (
                      <li key={index}>{assumption}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h4 className="text-lg font-medium text-gray-900 mb-2">2.5 Dependencies</h4>
                  <ul className="list-disc list-inside text-gray-700 space-y-1">
                    {srsData.sections.overall_description.dependencies.map((dep, index) => (
                      <li key={index}>{dep}</li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
          </div>

          {/* Note Section */}
          <div className="bg-blue-50 p-6 rounded-lg">
            <h3 className="text-lg font-medium text-blue-900 mb-2">3. Note</h3>
            <p className="text-blue-800 italic">
              This is an initial SRS document generated by Module 1. It contains only the Introduction and Overall Description sections. 
              Specific Requirements and other detailed sections will be generated in subsequent modules of the requirements engineering system.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SRSViewer;
